# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qREmwp-gGm7fI_cQEBCqvLArwAsEth6I
"""

import pandas as pd
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
from keras.models import Sequential
from keras.layers import Dense

import pandas as pd
df = pd.read_csv('dataset_review_tokped_cleaned.csv')
df.head()

rating = pd.get_dummies(df.Rating)
rating

new_df = pd.concat([df, rating], axis=1)
new_df = new_df.drop(columns='Rating')
# new_df
dataset = new_df.values

# X = dataset[:,0:1]
# X

review = new_df['Review'].values
label = new_df[[1, 2, 3, 4, 5]].values
new_df

# y = dataset[:,1:6]
# y

review

#  from sklearn.model_selection import train_test_split
# sinopsis_latih, sinopsis_test, label_latih, label_test = train_test_split(sinopsis, label, test_size=0.2)

review_latih, review_test, label_latih, label_test = train_test_split(review, label, test_size=0.2)

from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
 
tokenizer = Tokenizer(num_words=5000, oov_token='x',filters='!"#$%&()*+,-./:;<=>@[\]^_`{|}~ ')
tokenizer.fit_on_texts(review_latih) 
tokenizer.fit_on_texts(review_test)
 
sekuens_latih = tokenizer.texts_to_sequences(review_latih)
sekuens_test = tokenizer.texts_to_sequences(review_test)
 
padded_latih = pad_sequences(sekuens_latih) 
padded_test = pad_sequences(sekuens_test)

import tensorflow as tf
model = tf.keras.Sequential([
    tf.keras.layers.Embedding(input_dim=5000, output_dim=64),
    tf.keras.layers.LSTM(128),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(5, activation='softmax')
])
model.compile(optimizer='adam', metrics=['accuracy'], loss='categorical_crossentropy',)
model.summary()

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>0.9 and logs.get('val_accuracy')>0.9):
      self.model.stop_training = True
      print("\nThe accuracy of the training set and the validation set has reached > 90%!")
callbacks = myCallback()



# model fit
history = model.fit(padded_latih, label_latih, epochs=5, 
                    validation_data=(padded_test, label_test), callbacks=[callbacks], verbose=2)